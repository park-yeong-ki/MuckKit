{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport http from \"@/api/http\";\nimport router from \"@/router\";\nexport default {\n  components: {},\n  data() {\n    return {\n      memberId: \"\",\n      memberPw: \"\",\n      email: \"\",\n      emailState: null\n    };\n  },\n  created() {},\n  methods: {\n    login() {\n      http.post(\"/member/login\", {\n        memberId: this.memberId,\n        memberPw: this.memberPw\n      }).then(resp => {\n        console.log(resp);\n        alert(\"환영합니다.\");\n        sessionStorage.setItem(\"access-token\", resp.headers.get(\"access-token\"));\n        sessionStorage.setItem(\"refresh-token\", resp.headers.get(\"refresh-token\"));\n        this.$store.dispatch(\"memberLogin\");\n        router.push({\n          name: \"main\"\n        });\n      }).catch(error => {\n        console.log(error);\n        alert(\"아이디와 비밀번호를 확인해주세요.\");\n      });\n    },\n    checkFormValidity() {\n      let regex = /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i;\n      const valid = this.$refs.form.checkValidity();\n      this.emailState = valid;\n      if (this.emailState) {\n        this.emailState = regex.test(this.email);\n      }\n      return this.emailState;\n    },\n    resetModal() {\n      this.email = \"\";\n      this.emailState = null;\n    },\n    handleOk(bvModalEvent) {\n      // Prevent modal from closing\n      bvModalEvent.preventDefault();\n      // Trigger submit handler\n      this.handleSubmit();\n    },\n    handleSubmit() {\n      // Exit when the form isn't valid\n      if (!this.checkFormValidity()) {\n        return;\n      }\n      http.post(\"/member/find-password\", {\n        memberId: this.email\n      }).then(resp => {\n        console.log(resp);\n        this.emailState = true;\n      }).catch(error => {\n        console.log(error);\n      });\n    }\n  }\n};","map":{"version":3,"names":["http","router","components","data","memberId","memberPw","email","emailState","created","methods","login","post","then","resp","console","log","alert","sessionStorage","setItem","headers","get","$store","dispatch","push","name","catch","error","checkFormValidity","regex","valid","$refs","form","checkValidity","test","resetModal","handleOk","bvModalEvent","preventDefault","handleSubmit"],"sources":["src/components/user/UserLogin.vue"],"sourcesContent":["<template>\r\n  <div class=\"container col-xl-10 col-xxl-8 px-12 py-5\">\r\n    <div class=\"row align-items-center py-5\">\r\n      <!-- <div class=\"col-lg-7 text-center text-lg-start\"></div> -->\r\n      <div class=\"col-md-10 mx-auto col-lg-6\">\r\n        <h1 class=\"display-4 fw-bold lh-1 text-body-emphasis mb-3\">로그인</h1>\r\n        <form class=\"p-4 p-md-6 border rounded-3 bg-body-tertiary\">\r\n          <div class=\"form-floating mb-3\">\r\n            <label for=\"floatingInput\">아이디</label>\r\n            <input\r\n              type=\"email\"\r\n              class=\"form-control\"\r\n              id=\"floatingInput\"\r\n              placeholder=\"name@example.com\"\r\n              v-model=\"memberId\"\r\n            />\r\n          </div>\r\n\r\n          <div class=\"form-floating mb-4\">\r\n            <label for=\"floatingPassword\">비밀번호</label>\r\n            <input\r\n              type=\"password\"\r\n              class=\"form-control\"\r\n              id=\"floatingPassword\"\r\n              placeholder=\"Password\"\r\n              v-model=\"memberPw\"\r\n            />\r\n          </div>\r\n\r\n          <button\r\n            class=\"w-100 btn btn-lg\"\r\n            style=\"background-color: orange\"\r\n            type=\"button\"\r\n            @click=\"login\"\r\n          >\r\n            로그인\r\n          </button>\r\n          <hr class=\"my-4\" />\r\n          <small class=\"text-body-secondary\">비밀번호를 잊어버리셨나요? </small>\r\n          <small class=\"font-weight-bold\" v-b-modal.modal-prevent-closing>비밀번호 찾기</small>\r\n          <b-modal\r\n            id=\"modal-prevent-closing\"\r\n            ref=\"modal\"\r\n            title=\"비밀번호 찾기\"\r\n            @show=\"resetModal\"\r\n            @hidden=\"resetModal\"\r\n            @ok=\"handleOk\"\r\n            ok-title=\"확인\"\r\n            ok-variant=\"secondary\"\r\n            cancel-title=\"취소\"\r\n            cancel-variant=\"secondary\"\r\n          >\r\n            <form ref=\"form\" @submit.stop.prevent=\"handleSubmit\">\r\n              <b-form-group\r\n                label=\"이메일\"\r\n                label-for=\"email-input\"\r\n                invalid-feedback=\"이메일을 입력해주세요.\"\r\n                valid-feedback=\"임시비밀번호가 발급되었습니다.\"\r\n                :state=\"emailState\"\r\n              >\r\n                <b-form-input\r\n                  id=\"email-input\"\r\n                  v-model=\"email\"\r\n                  :state=\"emailState\"\r\n                  required\r\n                ></b-form-input>\r\n              </b-form-group>\r\n            </form>\r\n          </b-modal>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport http from \"@/api/http\";\r\nimport router from \"@/router\";\r\n\r\nexport default {\r\n  components: {},\r\n  data() {\r\n    return {\r\n      memberId: \"\",\r\n      memberPw: \"\",\r\n      email: \"\",\r\n      emailState: null,\r\n    };\r\n  },\r\n  created() {},\r\n  methods: {\r\n    login() {\r\n      http\r\n        .post(\"/member/login\", {\r\n          memberId: this.memberId,\r\n          memberPw: this.memberPw,\r\n        })\r\n        .then((resp) => {\r\n          console.log(resp);\r\n          alert(\"환영합니다.\");\r\n\r\n          sessionStorage.setItem(\"access-token\", resp.headers.get(\"access-token\"));\r\n          sessionStorage.setItem(\"refresh-token\", resp.headers.get(\"refresh-token\"));\r\n\r\n          this.$store.dispatch(\"memberLogin\");\r\n\r\n          router.push({ name: \"main\" });\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n          alert(\"아이디와 비밀번호를 확인해주세요.\");\r\n        });\r\n    },\r\n    checkFormValidity() {\r\n      let regex =\r\n        /^[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*@[0-9a-zA-Z]([-_.]?[0-9a-zA-Z])*\\.[a-zA-Z]{2,3}$/i;\r\n\r\n      const valid = this.$refs.form.checkValidity();\r\n      this.emailState = valid;\r\n      if (this.emailState) {\r\n        this.emailState = regex.test(this.email);\r\n      }\r\n\r\n      return this.emailState;\r\n    },\r\n    resetModal() {\r\n      this.email = \"\";\r\n      this.emailState = null;\r\n    },\r\n    handleOk(bvModalEvent) {\r\n      // Prevent modal from closing\r\n      bvModalEvent.preventDefault();\r\n      // Trigger submit handler\r\n      this.handleSubmit();\r\n    },\r\n    handleSubmit() {\r\n      // Exit when the form isn't valid\r\n      if (!this.checkFormValidity()) {\r\n        return;\r\n      }\r\n      http\r\n        .post(\"/member/find-password\", {\r\n          memberId: this.email,\r\n        })\r\n        .then((resp) => {\r\n          console.log(resp);\r\n          this.emailState = true;\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped></style>\r\n"],"mappings":";AA4EA,OAAAA,IAAA;AACA,OAAAC,MAAA;AAEA;EACAC,UAAA;EACAC,KAAA;IACA;MACAC,QAAA;MACAC,QAAA;MACAC,KAAA;MACAC,UAAA;IACA;EACA;EACAC,QAAA;EACAC,OAAA;IACAC,MAAA;MACAV,IAAA,CACAW,IAAA;QACAP,QAAA,OAAAA,QAAA;QACAC,QAAA,OAAAA;MACA,GACAO,IAAA,CAAAC,IAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,IAAA;QACAG,KAAA;QAEAC,cAAA,CAAAC,OAAA,iBAAAL,IAAA,CAAAM,OAAA,CAAAC,GAAA;QACAH,cAAA,CAAAC,OAAA,kBAAAL,IAAA,CAAAM,OAAA,CAAAC,GAAA;QAEA,KAAAC,MAAA,CAAAC,QAAA;QAEArB,MAAA,CAAAsB,IAAA;UAAAC,IAAA;QAAA;MACA,GACAC,KAAA,CAAAC,KAAA;QACAZ,OAAA,CAAAC,GAAA,CAAAW,KAAA;QACAV,KAAA;MACA;IACA;IACAW,kBAAA;MACA,IAAAC,KAAA,GACA;MAEA,MAAAC,KAAA,QAAAC,KAAA,CAAAC,IAAA,CAAAC,aAAA;MACA,KAAAzB,UAAA,GAAAsB,KAAA;MACA,SAAAtB,UAAA;QACA,KAAAA,UAAA,GAAAqB,KAAA,CAAAK,IAAA,MAAA3B,KAAA;MACA;MAEA,YAAAC,UAAA;IACA;IACA2B,WAAA;MACA,KAAA5B,KAAA;MACA,KAAAC,UAAA;IACA;IACA4B,SAAAC,YAAA;MACA;MACAA,YAAA,CAAAC,cAAA;MACA;MACA,KAAAC,YAAA;IACA;IACAA,aAAA;MACA;MACA,UAAAX,iBAAA;QACA;MACA;MACA3B,IAAA,CACAW,IAAA;QACAP,QAAA,OAAAE;MACA,GACAM,IAAA,CAAAC,IAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,IAAA;QACA,KAAAN,UAAA;MACA,GACAkB,KAAA,CAAAC,KAAA;QACAZ,OAAA,CAAAC,GAAA,CAAAW,KAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}